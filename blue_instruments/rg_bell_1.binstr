<instrument type='blue.orchestra.GenericInstrument'>
  <name>rg_bell_1</name>
  <comment></comment>
  <globalOrc></globalOrc>
  <globalSco></globalSco>
  <instrumentText>; =============================================================================
; =============================================================================
; BELL
; =============================================================================
; =============================================================================

idur        = p3
iamp        = p4
icps1       = p5
icps2       = p6
ipch_dur    = p7 * idur
iscale      = p8
ipch_fract  = p9

ipan1       = p10
ipan2       = p11
irvbgain    = p12
ifunc       = p13
ienv_shape  = p14

ifeedback     = p15       ;range 1-10
ifb_freq_1    = p16
ifb_freq_2    = p17
ifb_1         = p18       ;range 0-2
ifb_2         = p19
ifb_3         = p20
ifb_time_1    = p21
ifb_time_2    = p22
ifb_fold      = p23

ipch1     cps2pch icps1, iscale
ipch2     cps2pch icps2, iscale
kpch_env  linseg  ipch1, ipch_dur, ipch2, idur - ipch_dur, ipch2

if (ipch_fract != 0) then
  kpch_env = kpch_env * ipch_fract
endif

if (ienv_shape == 1) then
  ienv_func   ftgenonce 0, 0, 512, 7, 0, 1, 1, 50, .6, 411, 0
else
  ienv_func   ftgenonce 0, 0, 512, 7, 0, 1, 1, 50, .6, 411, 0
endif

a5 oscil iamp*.25,1729+kpch_env,ifunc
a4 oscil (iamp*.3)+a5,973+kpch_env,ifunc
a1 oscil (iamp*.5)+a4,513+kpch_env,ifunc
a2 oscil a1+iamp,kpch_env,ifunc
a3 oscil iamp,440,ifunc
kenv oscil 1, 1/idur, ienv_func
am balance a2,a3
afinal = am * kenv


; =============================================================================
; Panning
; =============================================================================


if (ipan1 != ipan2) then
  kpan     linseg  ipan1, idur, ipan2
else
  kpan = ipan1
endif

apan_l, apan_r  pan2  afinal, kpan


; =============================================================================
; Feedback / Outputs
; =============================================================================

if (ifeedback == 0) then
  blueMixerOut      apan_l, apan_r
  garvbsig1 = garvbsig1 + (apan_l * irvbgain)
  garvbsig2 = garvbsig2 + (apan_r * irvbgain)
else
  kfb_freq  linseg    ifb_freq_1, idur, ifb_freq_2
  kfdbk     linseg    ifb_1, idur * ifb_time_1, ifb_2, idur * ifb_time_2, ifb_3
  atemp_l   delayr    1/20
  acomb_l   deltapi   1/kfb_freq
  atemp_r   delayr    1/20
  acomb_r   deltapi   1/kfb_freq

  if (ifb_fold &gt;= 1) then
    asig_l    fold  kfdbk * acomb_l, ifb_fold
    asig_r    fold  kfdbk * acomb_r, ifb_fold

    aiir_l    dcblock   apan_l + asig_l
    aiir_l    =         aiir_l - aiir_l * aiir_l * aiir_l/6
    aiir_r    dcblock   apan_r + asig_r
    aiir_r    =         aiir_r - aiir_r * aiir_r * aiir_r/6
  else
    aiir_l    dcblock   apan_l + (acomb_l * kfdbk)
    aiir_l    =         aiir_l - aiir_l * aiir_l * aiir_l/6
    aiir_r    dcblock   apan_r + (acomb_r * kfdbk)
    aiir_r    =         aiir_r - aiir_r * aiir_r * aiir_r/6
  endif

  delayw    aiir_l
  delayw    aiir_r

  blueMixerOut      acomb_l, acomb_r

  garvbsig1 = garvbsig1 + (acomb_l * irvbgain)
  garvbsig2 = garvbsig2 + (acomb_r * irvbgain)
endif</instrumentText>
  <opcodeList/>
</instrument>